// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API endpoints
export const API_CONFIG = {
  // –ë–∞–∑–æ–≤—ã–π URL API - –≤ dev –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy, –≤ prod - –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  get baseUrl(): string {
    if (import.meta.env.DEV) {
      // –í development –∏—Å–ø–æ–ª—å–∑—É–µ–º Vite proxy (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL)
      return '/api/v1';
    }
    // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    return import.meta.env.VITE_API_URL || 'http://localhost:8080/api/v1';
  },
  
  // Endpoints
  endpoints: {
    media: '/media',
    auth: '/auth',
    users: '/users',
    hubs: '/hubs',
    channels: '/channels',
  },
  
  // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä URL –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
  getMediaUrl: (storageKey: string): string => {
    const base = API_CONFIG.baseUrl.replace(/\/+$/, ''); // –£–±–∏—Ä–∞–µ–º trailing slash
    return `${base}/media/${storageKey}`;
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –∑–∞–ø—Ä–æ—Å–æ–º –º–µ–¥–∏–∞
  isMediaUrl: (url: string): boolean => {
    const mediaPath = `${API_CONFIG.endpoints.media}/`;
    return url.includes(mediaPath) && url.includes('/api/v1/');
  },
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ storageKey –∏–∑ URL
  extractStorageKey: (url: string): string | null => {
    const regex = /\/media\/([^\/\?]+)/;
    const match = url.match(regex);
    return match ? match[1] : null;
  }
};

// –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (import.meta.env.DEV) {
  console.log('üîß API Configuration:', {
    baseUrl: API_CONFIG.baseUrl,
    mediaEndpoint: API_CONFIG.endpoints.media,
    exampleMediaUrl: API_CONFIG.getMediaUrl('example-key'),
    environment: import.meta.env.MODE,
    viteApiUrl: import.meta.env.VITE_API_URL
  });
}