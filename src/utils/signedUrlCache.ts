import useIndexedDB, { IndexedDBConfig, CacheOptions } from '../hooks/useIndexedDB';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è signed URLs
export const signedUrlDBConfig: IndexedDBConfig = {
  dbName: 'SignedUrlCache',
  version: 1,
  stores: [
    {
      name: 'signedUrls',
      keyPath: 'key',
      indexes: [
        { name: 'expiresAt', keyPath: 'expiresAt' },
        { name: 'createdAt', keyPath: 'createdAt' },
        { name: 'accessedAt', keyPath: 'accessedAt' }
      ]
    }
  ]
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
export const signedUrlCacheOptions: CacheOptions = {
  maxSize: 1000,
  cleanupRatio: 0.2
};

const BUFFER_MINUTES = 10; // –ë—É—Ñ–µ—Ä –≤ 10 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
const STORE_NAME = 'signedUrls';

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è UTC –≤—Ä–µ–º–µ–Ω–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å –±—É—Ñ–µ—Ä–æ–º
function convertUtcToLocalWithBuffer(utcTimestamp: string): number {
  const utcDate = new Date(utcTimestamp);
  const bufferTime = BUFFER_MINUTES * 60 * 1000;
  return utcDate.getTime() - bufferTime; // –í—ã—á–∏—Ç–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
}

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º signed URLs
export function useSignedUrlCache() {
  const db = useIndexedDB(signedUrlDBConfig);

  const get = async (storageKey: string): Promise<string | null> => {
    try {
      const url = await db.get<string>(STORE_NAME, storageKey);
      if (url) {
        console.log(`üóÑÔ∏è –ù–∞–π–¥–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL –≤ –∫—ç—à–µ –¥–ª—è ${storageKey}`);
      }
      return url;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞:', error);
      return null;
    }
  };

  const set = async (storageKey: string, signedUrl: string, expiresAtUtc: string): Promise<void> => {
    try {
      const expiresAt = convertUtcToLocalWithBuffer(expiresAtUtc);
      await db.set(STORE_NAME, storageKey, signedUrl, expiresAt, signedUrlCacheOptions);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω URL –≤ –∫—ç—à –¥–ª—è ${storageKey}, –∏—Å—Ç–µ–∫–∞–µ—Ç ${new Date(expiresAt).toLocaleString()}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à:', error);
    }
  };

  const getMultiple = async (storageKeys: string[]): Promise<Map<string, string>> => {
    try {
      console.log('üìñ getMultiple: reading from cache for keys:', storageKeys);
      const results = await db.getMultiple<string>(STORE_NAME, storageKeys);
      console.log('üìñ getMultiple: found', results.size, 'URLs in cache');
      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞:', error);
      return new Map();
    }
  };

  const setMultiple = async (urlData: Array<{ storageKey: string; signedUrl: string; expiresAt: string }>): Promise<void> => {
    try {
      const items = urlData.map(({ storageKey, signedUrl, expiresAt }) => ({
        key: storageKey,
        data: signedUrl,
        expiresAt: convertUtcToLocalWithBuffer(expiresAt)
      }));
      
      await db.setMultiple(STORE_NAME, items, signedUrlCacheOptions);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à:', error);
    }
  };

  const getKeysToFetch = async (storageKeys: string[]): Promise<string[]> => {
    console.log('üîç getKeysToFetch called with keys:', storageKeys);
    const cachedUrls = await getMultiple(storageKeys);
    console.log('üíæ Found in cache:', cachedUrls.size, 'URLs');
    const missingKeys = storageKeys.filter(key => !cachedUrls.has(key));
    console.log('‚ùå Missing keys:', missingKeys);
    return missingKeys;
  };

  const cleanExpired = async (): Promise<number> => {
    try {
      return await db.cleanExpired(STORE_NAME);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π:', error);
      return 0;
    }
  };

  const getStats = async (): Promise<{ total: number; expired: number }> => {
    try {
      return await db.getStats(STORE_NAME);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞:', error);
      return { total: 0, expired: 0 };
    }
  };

  const clear = async (): Promise<void> => {
    try {
      await db.clear(STORE_NAME);
      console.log('üóëÔ∏è –ö—ç—à signed URLs –æ—á–∏—â–µ–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
  };

  const init = async (): Promise<void> => {
    try {
      await db.init();
      const expiredCount = await cleanExpired();
      const stats = await getStats();
      console.log(`üóÑÔ∏è –ö—ç—à signed URLs –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø–∏—Å–µ–π: ${stats.total}, –æ—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö: ${expiredCount}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞:', error);
    }
  };

  return {
    get,
    set,
    getMultiple,
    setMultiple,
    getKeysToFetch,
    cleanExpired,
    getStats,
    clear,
    init,
    isReady: db.isReady
  };
}