import React, { createContext, useContext, useState, useCallback, useEffect } from 'react';
import { useGetSignedUrlsMutation } from '../api/media';
import { useSignedUrlCache } from '../utils/signedUrlCache';

interface SignedUrlContextType {
  signedUrls: Map<string, string>;
  fetchSignedUrls: (storageKeys: string[]) => Promise<void>;
  getSignedUrl: (storageKey: string) => string | undefined;
}

const SignedUrlContext = createContext<SignedUrlContextType | undefined>(undefined);

export const SignedUrlProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [signedUrls, setSignedUrls] = useState(new Map<string, string>());
  const [getSignedUrls, { isLoading: isMutationLoading, error: mutationError }] = useGetSignedUrlsMutation();
  const cache = useSignedUrlCache();
  
  console.log('üèóÔ∏è SignedUrlProvider: Initializing with signedUrls size:', signedUrls.size);
  console.log('üîç Mutation state:', { isMutationLoading, mutationError });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
  useEffect(() => {
    cache.init();
  }, [cache]);

  const fetchSignedUrls = useCallback(async (storageKeys: string[]) => {
    console.log(`üöÄ fetchSignedUrls called with ${storageKeys.length} keys:`, storageKeys);
    if (storageKeys.length === 0) {
      console.log(`‚ùå No storage keys provided, returning`);
      return;
    }

    try {
      console.log(`üîç –ó–∞–ø—Ä–æ—Å signed URLs –¥–ª—è ${storageKeys.length} –∫–ª—é—á–µ–π:`, storageKeys);
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π
      const cachedUrls = await cache.getMultiple(storageKeys);
      
      // 2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ URL –≤ –ø–∞–º—è—Ç—å
      cachedUrls.forEach((url, key) => {
        signedUrls.set(key, url);
      });
      
      // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      const keysToFetch = await cache.getKeysToFetch(storageKeys);
      
      console.log(`üíæ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: ${cachedUrls.size}, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å: ${keysToFetch.length}`);
      
      if (keysToFetch.length === 0) {
        console.log('‚úÖ –í—Å–µ URL –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ');
        return;
      }

      // 4. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ URL
      console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º getSignedUrls mutation —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { storage_keys: keysToFetch });
      
      const result = await getSignedUrls({
        storage_keys: keysToFetch
      }).unwrap();

      console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ URL –≤ –∫—ç—à –∏ –ø–∞–º—è—Ç—å
      const urlsToCache: Array<{ storageKey: string; signedUrl: string; expiresAt: string }> = [];
      
      Object.entries(result).forEach(([storageKey, data]) => {
        if (data && data.sign && data.expires_at) {
          signedUrls.set(storageKey, data.sign);
          urlsToCache.push({
            storageKey,
            signedUrl: data.sign,
            expiresAt: data.expires_at
          });
        }
      });

      // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (urlsToCache.length > 0) {
        await cache.setMultiple(urlsToCache);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è signed URLs:', error);
    }
  }, [getSignedUrls, signedUrls, cache]);

  const getSignedUrl = useCallback((storageKey: string) => {
    return signedUrls.get(storageKey);
  }, [signedUrls]);

  return (
    <SignedUrlContext.Provider value={{ signedUrls, fetchSignedUrls, getSignedUrl }}>
      {children}
    </SignedUrlContext.Provider>
  );
};

export const useSignedUrls = () => {
  const context = useContext(SignedUrlContext);
  console.log('üîç useSignedUrls called, context:', context ? 'exists' : 'null');
  if (!context) {
    throw new Error('useSignedUrls must be used within SignedUrlProvider');
  }
  console.log('üîç useSignedUrls returning:', {
    signedUrlsSize: context.signedUrls.size,
    fetchSignedUrlsType: typeof context.fetchSignedUrls
  });
  return context;
};